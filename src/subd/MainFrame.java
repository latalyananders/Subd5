/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package subd;

import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author Админ
 */
public class MainFrame extends javax.swing.JFrame implements ConnectionChanged{

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        controller.addListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addConnectionDialog = new javax.swing.JDialog();
        labelDataBase = new javax.swing.JLabel();
        labelPort = new javax.swing.JLabel();
        labelUsername = new javax.swing.JLabel();
        labelPassword = new javax.swing.JLabel();
        textFieldDataBase = new javax.swing.JTextField();
        textFieldPort = new javax.swing.JTextField();
        textFieldUsername = new javax.swing.JTextField();
        textFieldPassword = new javax.swing.JTextField();
        buttonOk = new javax.swing.JButton();
        guestDialog = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textFieldGuestSurname = new javax.swing.JTextField();
        textFieldGuestName = new javax.swing.JTextField();
        textFieldGuestPatr = new javax.swing.JTextField();
        buttonGuestCancel = new javax.swing.JButton();
        buttonGuestOk = new javax.swing.JButton();
        roomDialog = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        textFieldRoomId = new javax.swing.JTextField();
        textFieldRoomStatus = new javax.swing.JTextField();
        textFieldRoomTip = new javax.swing.JTextField();
        textFieldRoomCost = new javax.swing.JTextField();
        buttonRoomCancel = new javax.swing.JButton();
        buttonRoomOk = new javax.swing.JButton();
        addRoomOrderDialog = new javax.swing.JDialog();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        textFieldRoomOrderCountDay = new javax.swing.JTextField();
        textFieldRoomOrderOrderDate = new javax.swing.JTextField();
        buttonRoomOrderCancel = new javax.swing.JButton();
        buttonRoomOrderOk = new javax.swing.JButton();
        comboBoxGuest = new javax.swing.JComboBox<>();
        comboBoxRoom = new javax.swing.JComboBox<>();
        employeeDialog = new javax.swing.JDialog();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        textFieldEmployeeSurname = new javax.swing.JTextField();
        textFieldEmployeeName = new javax.swing.JTextField();
        textFieldEmployeePatr = new javax.swing.JTextField();
        textFieldEmployeePosition = new javax.swing.JTextField();
        textFieldEmployeeMoney = new javax.swing.JTextField();
        buttonEmployeeCancel = new javax.swing.JButton();
        buttonEmployeeOk = new javax.swing.JButton();
        serviceDialog = new javax.swing.JDialog();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        textFieldServiceName = new javax.swing.JTextField();
        textFieldServiceCost = new javax.swing.JTextField();
        buttonCancel = new javax.swing.JButton();
        buttonServiceOk = new javax.swing.JButton();
        comboBoxServiceEmployee = new javax.swing.JComboBox<>();
        serviceOrderDialog = new javax.swing.JDialog();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        textFieldServiceOrderOrderDate = new javax.swing.JTextField();
        buttonServiceOrderCancel = new javax.swing.JButton();
        buttonServiceOrderOk = new javax.swing.JButton();
        comboBoxOrder = new javax.swing.JComboBox<>();
        comboBoxService = new javax.swing.JComboBox<>();
        removeClientDialog = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableQuery = new javax.swing.JTable();
        comboBoxRooms = new javax.swing.JComboBox<>();
        buttonRemoveOk = new javax.swing.JButton();
        buttomRemoveCancel = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        labelConnection = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTable = new javax.swing.JTable();
        buttonEdit = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuDBConnection = new javax.swing.JMenu();
        jMenuItemNewConnection = new javax.swing.JMenuItem();
        jMenuItemDisconnect = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuDirectory = new javax.swing.JMenu();
        menuItemGuest = new javax.swing.JMenuItem();
        menuItemRoom = new javax.swing.JMenuItem();
        menuItemRoomOrder = new javax.swing.JMenuItem();
        menuItemEmployee = new javax.swing.JMenuItem();
        menuItemService = new javax.swing.JMenuItem();
        menuItemServiceOrder = new javax.swing.JMenuItem();
        menuTransactions = new javax.swing.JMenu();
        menuItemAddRoomOrder = new javax.swing.JMenuItem();
        menuItemRemoveGuest = new javax.swing.JMenuItem();
        menuItemAddServiceOrder = new javax.swing.JMenuItem();

        addConnectionDialog.setBackground(new java.awt.Color(255, 255, 255));
        addConnectionDialog.setBounds(new java.awt.Rectangle(0, 0, 400, 350));
        addConnectionDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addConnectionDialog.setResizable(false);

        labelDataBase.setText("База данных:");

        labelPort.setText("Порт:");

        labelUsername.setText("Имя пользователя:");

        labelPassword.setText("Пароль:");

        textFieldDataBase.setText("HotelDB");

        textFieldPort.setText("5432");

        textFieldUsername.setText("postgres");

        textFieldPassword.setText("1");

        buttonOk.setText("OK");
        buttonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addConnectionDialogLayout = new javax.swing.GroupLayout(addConnectionDialog.getContentPane());
        addConnectionDialog.getContentPane().setLayout(addConnectionDialogLayout);
        addConnectionDialogLayout.setHorizontalGroup(
            addConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addConnectionDialogLayout.createSequentialGroup()
                .addGroup(addConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addConnectionDialogLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(addConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelPassword)
                            .addComponent(labelUsername)
                            .addComponent(labelDataBase)
                            .addComponent(labelPort))
                        .addGap(18, 18, 18)
                        .addGroup(addConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldDataBase, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addConnectionDialogLayout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(buttonOk)))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        addConnectionDialogLayout.setVerticalGroup(
            addConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addConnectionDialogLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(addConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDataBase)
                    .addComponent(textFieldDataBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPort)
                    .addComponent(textFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUsername)
                    .addComponent(textFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addConnectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPassword)
                    .addComponent(textFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(buttonOk)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        guestDialog.setBounds(new java.awt.Rectangle(0, 0, 450, 350));

        jLabel2.setText("Фамилия");

        jLabel3.setText("Имя:");

        jLabel4.setText("Отчество:");

        buttonGuestCancel.setText("Отмена");
        buttonGuestCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGuestCancelActionPerformed(evt);
            }
        });

        buttonGuestOk.setText("ОК");
        buttonGuestOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGuestOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout guestDialogLayout = new javax.swing.GroupLayout(guestDialog.getContentPane());
        guestDialog.getContentPane().setLayout(guestDialogLayout);
        guestDialogLayout.setHorizontalGroup(
            guestDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guestDialogLayout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addGroup(guestDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(guestDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textFieldGuestSurname, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(textFieldGuestName)
                    .addComponent(textFieldGuestPatr))
                .addContainerGap(113, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, guestDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonGuestOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonGuestCancel)
                .addContainerGap())
        );
        guestDialogLayout.setVerticalGroup(
            guestDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guestDialogLayout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(guestDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textFieldGuestSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(guestDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textFieldGuestName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(guestDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textFieldGuestPatr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addGroup(guestDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonGuestCancel)
                    .addComponent(buttonGuestOk))
                .addContainerGap())
        );

        roomDialog.setBounds(new java.awt.Rectangle(0, 0, 450, 350));

        jLabel5.setText("Номер:");

        jLabel6.setText("Статус:");

        jLabel7.setText("Тип:");

        jLabel8.setText("Стоимость:");

        buttonRoomCancel.setText("Отмена");
        buttonRoomCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRoomCancelActionPerformed(evt);
            }
        });

        buttonRoomOk.setText("ОК");
        buttonRoomOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRoomOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roomDialogLayout = new javax.swing.GroupLayout(roomDialog.getContentPane());
        roomDialog.getContentPane().setLayout(roomDialogLayout);
        roomDialogLayout.setHorizontalGroup(
            roomDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonRoomOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonRoomCancel)
                .addContainerGap())
            .addGroup(roomDialogLayout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addGroup(roomDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(roomDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textFieldRoomId, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldRoomStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldRoomTip, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldRoomCost, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        roomDialogLayout.setVerticalGroup(
            roomDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomDialogLayout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(roomDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textFieldRoomId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(textFieldRoomStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(textFieldRoomTip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(textFieldRoomCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(roomDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRoomCancel)
                    .addComponent(buttonRoomOk))
                .addContainerGap())
        );

        addRoomOrderDialog.setBounds(new java.awt.Rectangle(0, 0, 450, 350));

        jLabel10.setText("Клиент:");

        jLabel11.setText("Номер:");

        jLabel12.setText("Количество дней:");

        jLabel13.setText("Дата:");

        buttonRoomOrderCancel.setText("Отмена");
        buttonRoomOrderCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRoomOrderCancelActionPerformed(evt);
            }
        });

        buttonRoomOrderOk.setText("Ок");
        buttonRoomOrderOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRoomOrderOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addRoomOrderDialogLayout = new javax.swing.GroupLayout(addRoomOrderDialog.getContentPane());
        addRoomOrderDialog.getContentPane().setLayout(addRoomOrderDialogLayout);
        addRoomOrderDialogLayout.setHorizontalGroup(
            addRoomOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addRoomOrderDialogLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(addRoomOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(addRoomOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textFieldRoomOrderCountDay, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(textFieldRoomOrderOrderDate, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(comboBoxGuest, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxRoom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(111, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addRoomOrderDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonRoomOrderOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonRoomOrderCancel)
                .addContainerGap())
        );
        addRoomOrderDialogLayout.setVerticalGroup(
            addRoomOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addRoomOrderDialogLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addGroup(addRoomOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(comboBoxGuest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addRoomOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(comboBoxRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addRoomOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(textFieldRoomOrderCountDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addRoomOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(textFieldRoomOrderOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(addRoomOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRoomOrderCancel)
                    .addComponent(buttonRoomOrderOk))
                .addContainerGap())
        );

        employeeDialog.setBounds(new java.awt.Rectangle(0, 0, 450, 380));

        jLabel15.setText("Фамилия:");

        jLabel16.setText("Имя:");

        jLabel17.setText("Отчество:");

        jLabel18.setText("Должность:");

        jLabel19.setText("Зар. плата:");

        buttonEmployeeCancel.setText("Отмена");
        buttonEmployeeCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEmployeeCancelActionPerformed(evt);
            }
        });

        buttonEmployeeOk.setText("Ок");
        buttonEmployeeOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEmployeeOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout employeeDialogLayout = new javax.swing.GroupLayout(employeeDialog.getContentPane());
        employeeDialog.getContentPane().setLayout(employeeDialogLayout);
        employeeDialogLayout.setHorizontalGroup(
            employeeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, employeeDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonEmployeeOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonEmployeeCancel)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, employeeDialogLayout.createSequentialGroup()
                .addContainerGap(112, Short.MAX_VALUE)
                .addGroup(employeeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19)
                    .addComponent(jLabel18)
                    .addComponent(jLabel17)
                    .addComponent(jLabel16)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(employeeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textFieldEmployeeSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldEmployeePatr, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldEmployeePosition, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldEmployeeMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(109, 109, 109))
        );
        employeeDialogLayout.setVerticalGroup(
            employeeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeeDialogLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(employeeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(textFieldEmployeeSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(employeeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(textFieldEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(employeeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(textFieldEmployeePatr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(employeeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(textFieldEmployeePosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(employeeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(textFieldEmployeeMoney, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(employeeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonEmployeeCancel)
                    .addComponent(buttonEmployeeOk))
                .addContainerGap())
        );

        serviceDialog.setBounds(new java.awt.Rectangle(0, 0, 450, 350));

        jLabel21.setText("Работник:");

        jLabel22.setText("Наименование:");

        jLabel23.setText("Стоимость:");

        buttonCancel.setText("Отмена");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonServiceOk.setText("Ок");
        buttonServiceOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonServiceOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout serviceDialogLayout = new javax.swing.GroupLayout(serviceDialog.getContentPane());
        serviceDialog.getContentPane().setLayout(serviceDialogLayout);
        serviceDialogLayout.setHorizontalGroup(
            serviceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, serviceDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonServiceOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 262, Short.MAX_VALUE)
                .addComponent(buttonCancel)
                .addContainerGap())
            .addGroup(serviceDialogLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(serviceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel23)
                    .addComponent(jLabel22)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(serviceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(comboBoxServiceEmployee, 0, 140, Short.MAX_VALUE)
                    .addComponent(textFieldServiceName)
                    .addComponent(textFieldServiceCost))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        serviceDialogLayout.setVerticalGroup(
            serviceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serviceDialogLayout.createSequentialGroup()
                .addContainerGap(99, Short.MAX_VALUE)
                .addGroup(serviceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(comboBoxServiceEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(serviceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(textFieldServiceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(serviceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(textFieldServiceCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(85, 85, 85)
                .addGroup(serviceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancel)
                    .addComponent(buttonServiceOk))
                .addContainerGap())
        );

        serviceOrderDialog.setBounds(new java.awt.Rectangle(0, 0, 450, 350));

        jLabel25.setText("Заказ:");

        jLabel26.setText("Услуга:");

        jLabel27.setText("Дата заказа:");

        buttonServiceOrderCancel.setText("Отмена");
        buttonServiceOrderCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonServiceOrderCancelActionPerformed(evt);
            }
        });

        buttonServiceOrderOk.setText("ОК");
        buttonServiceOrderOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonServiceOrderOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout serviceOrderDialogLayout = new javax.swing.GroupLayout(serviceOrderDialog.getContentPane());
        serviceOrderDialog.getContentPane().setLayout(serviceOrderDialogLayout);
        serviceOrderDialogLayout.setHorizontalGroup(
            serviceOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, serviceOrderDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonServiceOrderOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonServiceOrderCancel)
                .addContainerGap())
            .addGroup(serviceOrderDialogLayout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addGroup(serviceOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel27)
                    .addComponent(jLabel26)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(serviceOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textFieldServiceOrderOrderDate, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(comboBoxOrder, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxService, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        serviceOrderDialogLayout.setVerticalGroup(
            serviceOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serviceOrderDialogLayout.createSequentialGroup()
                .addContainerGap(116, Short.MAX_VALUE)
                .addGroup(serviceOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(comboBoxOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(serviceOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(comboBoxService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(serviceOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(textFieldServiceOrderOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addGroup(serviceOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonServiceOrderCancel)
                    .addComponent(buttonServiceOrderOk))
                .addContainerGap())
        );

        removeClientDialog.setBounds(new java.awt.Rectangle(0, 0, 450, 350));

        tableQuery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Клиент", "Номер"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableQuery);

        buttonRemoveOk.setText("Освободить этот номер");
        buttonRemoveOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveOkActionPerformed(evt);
            }
        });

        buttomRemoveCancel.setText("Отмена");
        buttomRemoveCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttomRemoveCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout removeClientDialogLayout = new javax.swing.GroupLayout(removeClientDialog.getContentPane());
        removeClientDialog.getContentPane().setLayout(removeClientDialogLayout);
        removeClientDialogLayout.setHorizontalGroup(
            removeClientDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeClientDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(removeClientDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(removeClientDialogLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(removeClientDialogLayout.createSequentialGroup()
                        .addGroup(removeClientDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(buttonRemoveOk, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxRooms, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttomRemoveCancel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        removeClientDialogLayout.setVerticalGroup(
            removeClientDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeClientDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(comboBoxRooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(removeClientDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRemoveOk)
                    .addComponent(buttomRemoveCancel))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        labelConnection.setText("Состояние: не подключено");

        outputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(outputTable);

        buttonEdit.setText("Редактировать");
        buttonEdit.setEnabled(false);
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonAdd.setText("Добавить");
        buttonAdd.setEnabled(false);
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonDelete.setText("Удалить");
        buttonDelete.setEnabled(false);
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));

        jMenuDBConnection.setText("Подключение к БД");

        jMenuItemNewConnection.setText("Новое подключение");
        jMenuItemNewConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewConnectionActionPerformed(evt);
            }
        });
        jMenuDBConnection.add(jMenuItemNewConnection);

        jMenuItemDisconnect.setText("Отключиться");
        jMenuItemDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDisconnectActionPerformed(evt);
            }
        });
        jMenuDBConnection.add(jMenuItemDisconnect);

        jMenuItemExit.setBackground(new java.awt.Color(255, 255, 255));
        jMenuItemExit.setText("Выход");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuDBConnection.add(jMenuItemExit);

        jMenuBar1.add(jMenuDBConnection);

        jMenuDirectory.setText("Справочники");

        menuItemGuest.setText("Клиенты");
        menuItemGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemGuestActionPerformed(evt);
            }
        });
        jMenuDirectory.add(menuItemGuest);

        menuItemRoom.setText("Номера");
        menuItemRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRoomActionPerformed(evt);
            }
        });
        jMenuDirectory.add(menuItemRoom);

        menuItemRoomOrder.setText("Заказы на номера");
        menuItemRoomOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRoomOrderActionPerformed(evt);
            }
        });
        jMenuDirectory.add(menuItemRoomOrder);

        menuItemEmployee.setText("Сотрудники");
        menuItemEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemEmployeeActionPerformed(evt);
            }
        });
        jMenuDirectory.add(menuItemEmployee);

        menuItemService.setText("Услуги");
        menuItemService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemServiceActionPerformed(evt);
            }
        });
        jMenuDirectory.add(menuItemService);

        menuItemServiceOrder.setText("Заказы на услуги");
        menuItemServiceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemServiceOrderActionPerformed(evt);
            }
        });
        jMenuDirectory.add(menuItemServiceOrder);

        jMenuBar1.add(jMenuDirectory);

        menuTransactions.setText("Действия");

        menuItemAddRoomOrder.setText("Добавить нового клиента");
        menuItemAddRoomOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAddRoomOrderActionPerformed(evt);
            }
        });
        menuTransactions.add(menuItemAddRoomOrder);

        menuItemRemoveGuest.setText("Выселить клиента");
        menuItemRemoveGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRemoveGuestActionPerformed(evt);
            }
        });
        menuTransactions.add(menuItemRemoveGuest);

        menuItemAddServiceOrder.setText("Добавить заказ на услугу");
        menuItemAddServiceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAddServiceOrderActionPerformed(evt);
            }
        });
        menuTransactions.add(menuItemAddServiceOrder);

        jMenuBar1.add(menuTransactions);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelConnection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonAdd))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonEdit)
                    .addComponent(buttonAdd)
                    .addComponent(labelConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonDelete))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setButtons(boolean enabled){
        buttonAdd.setEnabled(enabled);
        buttonEdit.setEnabled(enabled);
        buttonDelete.setEnabled(enabled);
    }
    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    //Подключение к БД (меню)
    private void jMenuItemNewConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewConnectionActionPerformed
        addConnectionDialog.setVisible(true);
    }//GEN-LAST:event_jMenuItemNewConnectionActionPerformed

    //Подключение к БД
    private void buttonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOkActionPerformed
        addConnectionDialog.setVisible(false);
        try {
            controller.connect(textFieldDataBase.getText(), textFieldPort.getText(),
                    textFieldUsername.getText(), textFieldPassword.getText());
            setButtons(false);
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonOkActionPerformed

    //Отключиться
    private void jMenuItemDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDisconnectActionPerformed
        try{
            controller.disconnect();
            setButtons(false);
        }
        catch (SQLException ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItemDisconnectActionPerformed

    //Клиенты
    private void menuItemGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemGuestActionPerformed
        if(controller.isConnected()){
            try {
                selectedTable = "guest";
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Отсутствует подключение к базе данных",
                    "Ошибка", WIDTH);
        
        
    }//GEN-LAST:event_menuItemGuestActionPerformed

    //Номера
    private void menuItemRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRoomActionPerformed
        if(controller.isConnected()){
            try {
                selectedTable = "room";
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Отсутствует подключение к базе данных",
                    "Ошибка", WIDTH);
    }//GEN-LAST:event_menuItemRoomActionPerformed

    //Заказы на номера
    private void menuItemRoomOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRoomOrderActionPerformed
        if(controller.isConnected()){
            try {
                selectedTable = "roomorder";
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Отсутствует подключение к базе данных",
                    "Ошибка", WIDTH);
    }//GEN-LAST:event_menuItemRoomOrderActionPerformed

    //Сотрудники
    private void menuItemEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemEmployeeActionPerformed
        if(controller.isConnected()){
            try {
                selectedTable = "employee";
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Отсутствует подключение к базе данных",
                    "Ошибка", WIDTH);
    }//GEN-LAST:event_menuItemEmployeeActionPerformed

    //Услуги
    private void menuItemServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemServiceActionPerformed
        if(controller.isConnected()){
            try {
                selectedTable = "service";
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Отсутствует подключение к базе данных",
                    "Ошибка", WIDTH);
    }//GEN-LAST:event_menuItemServiceActionPerformed

    //Заказы на услуги
    private void menuItemServiceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemServiceOrderActionPerformed
        if(controller.isConnected()){
            try {
                selectedTable = "serviceorder";
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Отсутствует подключение к базе данных",
                    "Ошибка", WIDTH);
    }//GEN-LAST:event_menuItemServiceOrderActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        switch(selectedTable){
            case "guest":
                mode = 0;
                textFieldGuestSurname.setText("");
                textFieldGuestName.setText("");
                textFieldGuestPatr.setText("");
                guestDialog.setVisible(true);
                break;
            case "room":
                mode = 0;
                textFieldRoomId.setText("");
                textFieldRoomStatus.setText("");
                textFieldRoomTip.setText("");
                textFieldRoomCost.setText("");
                roomDialog.setVisible(true);
                break;
            case "employee":
                mode = 0;
                textFieldEmployeeSurname.setText("");
                textFieldEmployeeName.setText("");
                textFieldEmployeePatr.setText("");
                textFieldEmployeePosition.setText("");
                textFieldEmployeeMoney.setText("");
                employeeDialog.setVisible(true);
                break;
            case "service":
                mode = 0;
                try {
                    DefaultComboBoxModel model = new DefaultComboBoxModel(controller.getEmployeeList());
                    comboBoxServiceEmployee.setModel(model);
                } catch (SQLException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                textFieldServiceName.setText("");
                textFieldServiceCost.setText("");
                serviceDialog.setVisible(true);
                break;
            default:
                JOptionPane.showMessageDialog(this, "На данном этапе добавление данных невозможно",
                    "Ошибка", WIDTH);
                break;
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonGuestCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGuestCancelActionPerformed
        guestDialog.setVisible(false);
    }//GEN-LAST:event_buttonGuestCancelActionPerformed

    private void buttonGuestOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGuestOkActionPerformed
        if(mode == 0)
            try {
                guestDialog.setVisible(false);
                Object[] data = {textFieldGuestSurname.getText(),
                    textFieldGuestName.getText(), textFieldGuestPatr.getText()};
                controller.addToDataBase(selectedTable, data);
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        else if (mode == 1){
            try {
                guestDialog.setVisible(false);
                Object[] oldData = {guests.get(selectedRow).getSurname(),
                                    guests.get(selectedRow).getName(),
                                    guests.get(selectedRow).getPatr()};
                Object[] newData = {textFieldGuestSurname.getText(),
                        textFieldGuestName.getText(), textFieldGuestPatr.getText()};
                controller.updateDataBase(selectedTable, oldData, newData);
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonGuestOkActionPerformed

    private void buttonRoomCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRoomCancelActionPerformed
        roomDialog.setVisible(false);
    }//GEN-LAST:event_buttonRoomCancelActionPerformed

    private void buttonRoomOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRoomOkActionPerformed
        if(mode == 0)
            try {
                roomDialog.setVisible(false);
                Object[] data = {textFieldRoomId.getText(), textFieldRoomStatus.getText(),
                    textFieldRoomTip.getText(), textFieldRoomCost.getText()};
                controller.addToDataBase(selectedTable, data);
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        else if (mode == 1){
            try {
                roomDialog.setVisible(false);
                Object[] oldData = {rooms.get(selectedRow).getId(),
                                    rooms.get(selectedRow).getBooleanStatus(),
                                    rooms.get(selectedRow).getTip(),
                                    rooms.get(selectedRow).getCost()};
                Object[] newData = {textFieldRoomId.getText(), textFieldRoomStatus.getText(),
                    textFieldRoomTip.getText(), textFieldRoomCost.getText()};
                controller.updateDataBase(selectedTable, oldData, newData);
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonRoomOkActionPerformed

    private void buttonRoomOrderCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRoomOrderCancelActionPerformed
        addRoomOrderDialog.setVisible(false);
    }//GEN-LAST:event_buttonRoomOrderCancelActionPerformed

    private void buttonRoomOrderOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRoomOrderOkActionPerformed
        try {
            addRoomOrderDialog.setVisible(false);
            
//            controller.addRoomOrder((String)comboBoxRooms.getModel().getSelectedItem()),
//                                    Integer.parseInt(textFieldRoomOrderRoomId.getText()),
//                                    Integer.parseInt(textFieldRoomOrderCountDay.getText()),
//                                    textFieldRoomOrderOrderDate.getText());
            controller.addRoomOrder((String)comboBoxGuest.getModel().getSelectedItem(),
                    (int)comboBoxRoom.getModel().getSelectedItem(),
                    Integer.parseInt(textFieldRoomOrderCountDay.getText()),
                    textFieldRoomOrderOrderDate.getText());
            updateTable();
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonRoomOrderOkActionPerformed

    private void menuItemAddRoomOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAddRoomOrderActionPerformed
        if(!controller.isConnected()){
            JOptionPane.showMessageDialog(this, "Отсутствует подключение к базе данных",
                    "Ошибка", WIDTH);
            return;
        }
        try {
            DefaultComboBoxModel modelGuest = new DefaultComboBoxModel(controller.getGuestList());
            comboBoxGuest.setModel(modelGuest);
            DefaultComboBoxModel modelRooms = new DefaultComboBoxModel(controller.getRoomList());
            comboBoxRoom.setModel(modelRooms);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        addRoomOrderDialog.setVisible(true);
    }//GEN-LAST:event_menuItemAddRoomOrderActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        
        selectedRow = outputTable.getSelectedRow();
        if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Выберите строку, данные в которой необходимо отредактировать",
                    "Ошибка", WIDTH);
            return;
        }
        switch(selectedTable){
            case "guest":
                mode = 1;
                textFieldGuestSurname.setText(guests.get(selectedRow).getSurname());
                textFieldGuestName.setText(guests.get(selectedRow).getName());
                textFieldGuestPatr.setText(guests.get(selectedRow).getPatr());
                guestDialog.setVisible(true);
                break;
            case "room":
                mode = 1;
                textFieldRoomId.setText(String.valueOf(rooms.get(selectedRow).getId()));
                textFieldRoomStatus.setText(String.valueOf(rooms.get(selectedRow).getBooleanStatus()));
                textFieldRoomTip.setText(rooms.get(selectedRow).getTip());
                textFieldRoomCost.setText(String.valueOf(rooms.get(selectedRow).getCost()));
                roomDialog.setVisible(true);
                break;
            case "employee":
                mode = 1;
                textFieldEmployeeSurname.setText(employees.get(selectedRow).getSurname());
                textFieldEmployeeName.setText(employees.get(selectedRow).getName());
                textFieldEmployeePatr.setText(employees.get(selectedRow).getPatr());
                textFieldEmployeePosition.setText(employees.get(selectedRow).getPosition());
                textFieldEmployeeMoney.setText(String.valueOf(employees.get(selectedRow).getMoney()));
                employeeDialog.setVisible(true);
                break;
            case "service":
                mode = 1;
                try {
                    DefaultComboBoxModel model = new DefaultComboBoxModel(controller.getEmployeeList());
                    comboBoxServiceEmployee.setModel(model);
                } catch (SQLException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                textFieldServiceName.setText(services.get(selectedRow).getName());
                textFieldServiceCost.setText(String.valueOf(services.get(selectedRow).getCost()));
                serviceDialog.setVisible(true);
                break;
            default:
                JOptionPane.showMessageDialog(this, "На данном этапе редактирование данных невозможно",
                    "Ошибка", WIDTH);
                break;
        }        
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        selectedRow = outputTable.getSelectedRow();
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Выберите строку, из которой необходимо удалить данные",
                    "Ошибка", WIDTH);
            return;
        }
        try {
        switch(selectedTable){
            case "guest":
                controller.deleteFromDataBase(selectedTable, guests.get(selectedRow).getId());
                break;
            case "room":
                controller.deleteFromDataBase(selectedTable, rooms.get(selectedRow).getId());
                break;
            case "employee":
                controller.deleteFromDataBase(selectedTable, employees.get(selectedRow).getId());
                break;
            case "service":
                controller.deleteFromDataBase(selectedTable, services.get(selectedRow).getId());
                break;
        }
        updateTable();
        } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Удаление данной строки приводит к нарушению"
                        + " целостности базы данных",
                    "Ошибка", WIDTH);
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonEmployeeCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEmployeeCancelActionPerformed
        employeeDialog.setVisible(false);
    }//GEN-LAST:event_buttonEmployeeCancelActionPerformed

    private void buttonEmployeeOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEmployeeOkActionPerformed
        if(mode == 0)
            try {
                employeeDialog.setVisible(false);
                Object[] data = {textFieldEmployeeSurname.getText(),
                textFieldEmployeeName.getText(), textFieldEmployeePatr.getText(),
                textFieldEmployeePosition.getText(), textFieldEmployeeMoney.getText()};
                controller.addToDataBase(selectedTable, data);
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        else if (mode == 1){
            try {
                employeeDialog.setVisible(false);
                Object[] oldData = {employees.get(selectedRow).getSurname(),
                                    employees.get(selectedRow).getName(),
                                    employees.get(selectedRow).getPatr(),
                                    employees.get(selectedRow).getPosition(),
                                    employees.get(selectedRow).getMoney()};
                Object[] newData = {textFieldEmployeeSurname.getText(),
                    textFieldEmployeeName.getText(), textFieldEmployeePatr.getText(),
                    textFieldEmployeePosition.getText(), textFieldEmployeeMoney.getText()};
                controller.updateDataBase(selectedTable, oldData, newData);
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_buttonEmployeeOkActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        serviceDialog.setVisible(false);
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void buttonServiceOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonServiceOkActionPerformed
        if(mode == 0)
            try {
                serviceDialog.setVisible(false);
                Object[] data = {(String)comboBoxServiceEmployee.getSelectedItem(),
                textFieldServiceName.getText(), textFieldServiceCost.getText()};
                controller.addToDataBase(selectedTable, data);
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        else if (mode == 1){
            try {
                serviceDialog.setVisible(false);
                Object[] oldData = {services.get(selectedRow).getEmployeeId(),
                                    services.get(selectedRow).getName(),
                                    services.get(selectedRow).getCost()};
                Object[] newData = {controller.getEmployeeByName((String)comboBoxServiceEmployee.getSelectedItem()),
                textFieldServiceName.getText(), textFieldServiceCost.getText()};
                controller.updateDataBase(selectedTable, oldData, newData);
                updateTable();
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_buttonServiceOkActionPerformed

    private void menuItemRemoveGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRemoveGuestActionPerformed
        if(!controller.isConnected()){
            JOptionPane.showMessageDialog(this, "Отсутствует подключение к базе данных",
                    "Ошибка", WIDTH);
            return;
        }
        try {
            Object[][] rooms = controller.getNotEnabledRooms();
            Object[] columns = {"Клиент", "Номер"};
            DefaultTableModel modelRoom = new DefaultTableModel(columns, 0);
                for(int i = 0; i < rooms[0].length; ++i){
                    Object[] row = {rooms[0][i], rooms[1][i]};
                    modelRoom.insertRow(i, row);
                }
            tableQuery.setModel(modelRoom);
            DefaultComboBoxModel model = new DefaultComboBoxModel(rooms[1]);
            comboBoxRooms.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        removeClientDialog.setVisible(true);
    }//GEN-LAST:event_menuItemRemoveGuestActionPerformed

    private void buttomRemoveCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttomRemoveCancelActionPerformed
        removeClientDialog.setVisible(false);
    }//GEN-LAST:event_buttomRemoveCancelActionPerformed

    private void buttonRemoveOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveOkActionPerformed
        try {
            int id = Integer.parseInt((String)comboBoxRooms.getModel().getSelectedItem());
            controller.setRoomFree(id);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        removeClientDialog.setVisible(false);
    }//GEN-LAST:event_buttonRemoveOkActionPerformed

    private void menuItemAddServiceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAddServiceOrderActionPerformed
        if(!controller.isConnected()){
            JOptionPane.showMessageDialog(this, "Отсутствует подключение к базе данных",
                    "Ошибка", WIDTH);
            return;
        }
        try {
            DefaultComboBoxModel modelOrder = new DefaultComboBoxModel(controller.getRoomOrderList());
            comboBoxOrder.setModel(modelOrder);
            DefaultComboBoxModel modelService = new DefaultComboBoxModel(controller.getServiceList());
            comboBoxService.setModel(modelService);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        serviceOrderDialog.setVisible(true);
    }//GEN-LAST:event_menuItemAddServiceOrderActionPerformed

    private void buttonServiceOrderCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonServiceOrderCancelActionPerformed
        serviceOrderDialog.setVisible(false);
    }//GEN-LAST:event_buttonServiceOrderCancelActionPerformed

    private void buttonServiceOrderOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonServiceOrderOkActionPerformed
        try {
//            controller.addServiceOrder(Integer.parseInt(textFieldServiceOrderId.getText()),
//                    Integer.parseInt(textFieldServiceOrderOrderId.getText()),
//                    Integer.parseInt(textFieldServiceOrderServiceId.getText()),
//                    textFieldServiceOrderOrderDate.getText());
            controller.addServiceOrder((String)comboBoxOrder.getSelectedItem(),
                    controller.getServiceIdByName((String)comboBoxService.getSelectedItem()),
                    textFieldServiceOrderOrderDate.getText());
            updateTable();
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        serviceOrderDialog.setVisible(false);
    }//GEN-LAST:event_buttonServiceOrderOkActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    private void updateTable() throws SQLException{
        if(controller.isConnected())
            switch(selectedTable){
                case "guest":
                    guests = controller.getGuests();
                    Object[] namesGuest = {"ID", "Фамилия", "Имя", "Отчество"};
                    DefaultTableModel modelGuest = new DefaultTableModel(namesGuest, 0);
                    for(int i = 0; i < guests.size(); ++i){
                        Object[] row = {guests.get(i).getId(),
                                        guests.get(i).getSurname(),
                                        guests.get(i).getName(),
                                        guests.get(i).getPatr()};
                        modelGuest.insertRow(i, row);
                    }
                    outputTable.setModel(modelGuest);
                    setButtons(true);
                    break;
                case "room":
                    rooms = controller.getRooms();
                    Object[] names = {"Номер", "Статус", "Тип номера", "Стоимость"};
                    DefaultTableModel modelRoom = new DefaultTableModel(names, 0);
                    for(int i = 0; i < rooms.size(); ++i){
                        Object[] row = {rooms.get(i).getId(),
                                        rooms.get(i).getStatus(),
                                        rooms.get(i).getTip(),
                                        rooms.get(i).getCost()};
                        modelRoom.insertRow(i, row);
                    }
                    outputTable.setModel(modelRoom);
                    setButtons(true);
                    break;
                case "roomorder":
                    roomOrders = controller.getRoomOrders();
                    Object[] namesRoomOrder = {"ID", "Посетитель", "Номер", "Количество дней", "Дата заказа",
                        "Стоимость"};
                    DefaultTableModel modelRoomOrder = new DefaultTableModel(namesRoomOrder, 0);
                    for(int i = 0; i < roomOrders.size(); ++i){
                        Object[] row = {roomOrders.get(i).getId(),
                                        roomOrders.get(i).getGuest().toString(),
                                        roomOrders.get(i).getRoomId(),
                                        roomOrders.get(i).getCountDay(),
                                        roomOrders.get(i).getOrderDate(),
                                        roomOrders.get(i).getChek()};
                        modelRoomOrder.insertRow(i, row);
                    }
                    outputTable.setModel(modelRoomOrder);
                    setButtons(false);
                    break;
                case "employee":
                    employees = controller.getEmployees();
                    Object[] namesEmployee = {"ID", "Фамилия", "Имя", "Отчество", "Должность", "Зар. плата"};
                    DefaultTableModel modelEmployee = new DefaultTableModel(namesEmployee, 0);
                    for(int i = 0; i < employees.size(); ++i){
                        Object[] row = {employees.get(i).getId(),
                                        employees.get(i).getSurname(),
                                        employees.get(i).getName(),
                                        employees.get(i).getPatr(),
                                        employees.get(i).getPosition(),
                                        employees.get(i).getMoney()};
                        modelEmployee.insertRow(i, row);
                    }
                    outputTable.setModel(modelEmployee);
                    setButtons(true);
                    break;
                case "service":
                    services = controller.getServices();
                    Object[] namesService = {"ID", "Сотрудник", "Наименование", "Цена"};
                    DefaultTableModel modelService = new DefaultTableModel(namesService, 0);
                    for(int i = 0; i < services.size(); ++i){
                        Object[] row = {services.get(i).getId(),
                                        services.get(i).getEmployee().toString(),
                                        services.get(i).getName(),
                                        services.get(i).getCost()};
                        modelService.insertRow(i, row);
                    }
                    outputTable.setModel(modelService);
                    setButtons(true);
                    break;
                case "serviceorder":
                    serviceOrders = controller.getServiceOrders();
                    Object[] namesServiceOrder = {"ID", "Заказ", "Услуга", "Дата"};
                    DefaultTableModel modelServiceOrder = new DefaultTableModel(namesServiceOrder, 0);
                    for(int i = 0; i < serviceOrders.size(); ++i){
                        Object[] row = {serviceOrders.get(i).getId(),
                                        serviceOrders.get(i).getRoomOrder().toString(),
                                        serviceOrders.get(i).getService().toString(),
                                        serviceOrders.get(i).getOrderDate()};
                        modelServiceOrder.insertRow(i, row);
                    }
                    outputTable.setModel(modelServiceOrder);
                    setButtons(false);
                    break;
                default:
//                    JOptionPane.showMessageDialog(this, "На данном этапе добавление данных невозможно",
//                        "Ошибка", WIDTH);
                    break;
            }
        else
            JOptionPane.showMessageDialog(this, "Отсутствует подключение к базе данных",
                    "Ошибка", WIDTH);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog addConnectionDialog;
    private javax.swing.JDialog addRoomOrderDialog;
    private javax.swing.JButton buttomRemoveCancel;
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonEmployeeCancel;
    private javax.swing.JButton buttonEmployeeOk;
    private javax.swing.JButton buttonGuestCancel;
    private javax.swing.JButton buttonGuestOk;
    private javax.swing.JButton buttonOk;
    private javax.swing.JButton buttonRemoveOk;
    private javax.swing.JButton buttonRoomCancel;
    private javax.swing.JButton buttonRoomOk;
    private javax.swing.JButton buttonRoomOrderCancel;
    private javax.swing.JButton buttonRoomOrderOk;
    private javax.swing.JButton buttonServiceOk;
    private javax.swing.JButton buttonServiceOrderCancel;
    private javax.swing.JButton buttonServiceOrderOk;
    private javax.swing.JComboBox<String> comboBoxGuest;
    private javax.swing.JComboBox<String> comboBoxOrder;
    private javax.swing.JComboBox<String> comboBoxRoom;
    private javax.swing.JComboBox<String> comboBoxRooms;
    private javax.swing.JComboBox<String> comboBoxService;
    private javax.swing.JComboBox<String> comboBoxServiceEmployee;
    private javax.swing.JDialog employeeDialog;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JDialog guestDialog;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuDBConnection;
    private javax.swing.JMenu jMenuDirectory;
    private javax.swing.JMenuItem jMenuItemDisconnect;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemNewConnection;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelConnection;
    private javax.swing.JLabel labelDataBase;
    private javax.swing.JLabel labelPassword;
    private javax.swing.JLabel labelPort;
    private javax.swing.JLabel labelUsername;
    private javax.swing.JMenuItem menuItemAddRoomOrder;
    private javax.swing.JMenuItem menuItemAddServiceOrder;
    private javax.swing.JMenuItem menuItemEmployee;
    private javax.swing.JMenuItem menuItemGuest;
    private javax.swing.JMenuItem menuItemRemoveGuest;
    private javax.swing.JMenuItem menuItemRoom;
    private javax.swing.JMenuItem menuItemRoomOrder;
    private javax.swing.JMenuItem menuItemService;
    private javax.swing.JMenuItem menuItemServiceOrder;
    private javax.swing.JMenu menuTransactions;
    private javax.swing.JTable outputTable;
    private javax.swing.JDialog removeClientDialog;
    private javax.swing.JDialog roomDialog;
    private javax.swing.JDialog serviceDialog;
    private javax.swing.JDialog serviceOrderDialog;
    private javax.swing.JTable tableQuery;
    private javax.swing.JTextField textFieldDataBase;
    private javax.swing.JTextField textFieldEmployeeMoney;
    private javax.swing.JTextField textFieldEmployeeName;
    private javax.swing.JTextField textFieldEmployeePatr;
    private javax.swing.JTextField textFieldEmployeePosition;
    private javax.swing.JTextField textFieldEmployeeSurname;
    private javax.swing.JTextField textFieldGuestName;
    private javax.swing.JTextField textFieldGuestPatr;
    private javax.swing.JTextField textFieldGuestSurname;
    private javax.swing.JTextField textFieldPassword;
    private javax.swing.JTextField textFieldPort;
    private javax.swing.JTextField textFieldRoomCost;
    private javax.swing.JTextField textFieldRoomId;
    private javax.swing.JTextField textFieldRoomOrderCountDay;
    private javax.swing.JTextField textFieldRoomOrderOrderDate;
    private javax.swing.JTextField textFieldRoomStatus;
    private javax.swing.JTextField textFieldRoomTip;
    private javax.swing.JTextField textFieldServiceCost;
    private javax.swing.JTextField textFieldServiceName;
    private javax.swing.JTextField textFieldServiceOrderOrderDate;
    private javax.swing.JTextField textFieldUsername;
    // End of variables declaration//GEN-END:variables
private final Controller controller = new Controller();
List<Guest> guests;
List<Room> rooms;
List<RoomOrder> roomOrders;
List<Employee> employees;
List<Service> services;
List<ServiceOrder> serviceOrders;
private String selectedTable = "";
private int mode = 0;
private int selectedRow = -1;

    @Override
    public void onConnectionChanged(boolean connection) {
        if(connection)
            labelConnection.setText("Состояние: подключено");
        else
            labelConnection.setText("Состояние: не подключено");
    }

    @Override
    public void onMessageSend(String message) {
        JOptionPane.showMessageDialog(this, message, message, HEIGHT);
    }

}
